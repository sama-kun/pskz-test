import * as _logger from 'loglevel';
export declare const logger: {
    warn: (...args: any[]) => void;
    error: (...args: any[]) => void;
    info: (...args: any[]) => void;
    debug: (...args: any[]) => void;
    setLogLevel: (level: _logger.LogLevelDesc, persist?: boolean | undefined) => void;
    LogLevels: _logger.LogLevel;
    setDefaultLevel: (level: _logger.LogLevelDesc) => void;
    _logger: {
        default: _logger.RootLogger;
        noConflict(): any;
        getLogger(name: string | symbol): _logger.Logger;
        getLoggers(): {
            [name: string]: _logger.Logger;
        };
        levels: _logger.LogLevel;
        methodFactory: _logger.MethodFactory;
        trace(...msg: any[]): void;
        debug(...msg: any[]): void;
        log(...msg: any[]): void;
        info(...msg: any[]): void;
        warn(...msg: any[]): void;
        error(...msg: any[]): void;
        setLevel(level: _logger.LogLevelDesc, persist?: boolean | undefined): void;
        getLevel(): 0 | 2 | 1 | 3 | 4 | 5;
        setDefaultLevel(level: _logger.LogLevelDesc): void;
        resetLevel(): void;
        enableAll(persist?: boolean | undefined): void;
        disableAll(persist?: boolean | undefined): void;
        rebuild(): void;
    };
};
export declare const setLogLevel: (level: _logger.LogLevelDesc, persist?: boolean | undefined) => void;
export declare const LogLevels: _logger.LogLevel;
